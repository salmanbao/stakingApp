/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MasterChefInterface extends ethers.utils.Interface {
  functions: {
    "approveForVesting()": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "deposit(uint256,uint8)": FunctionFragment;
    "getCurrentClaimed(address)": FunctionFragment;
    "getCurrentStaked(address)": FunctionFragment;
    "getCurrentUnstaked(address)": FunctionFragment;
    "getStakes(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingRewards(address)": FunctionFragment;
    "poolInfo()": FunctionFragment;
    "puase()": FunctionFragment;
    "pull(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardingToken()": FunctionFragment;
    "rewardsInfo(address)": FunctionFragment;
    "setTokenPerBlock(uint256)": FunctionFragment;
    "setTokenPerBlockMaxCap(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenPerBlock()": FunctionFragment;
    "tokenPerBlockMaxCap()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpuase()": FunctionFragment;
    "userStakes(address,uint256)": FunctionFragment;
    "vesting()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveForVesting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentClaimed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStaked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUnstaked",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getStakes", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "puase", values?: undefined): string;
  encodeFunctionData(functionFragment: "pull", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardsInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTokenPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPerBlockMaxCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPerBlockMaxCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpuase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vesting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveForVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUnstaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "puase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPerBlockMaxCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPerBlockMaxCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpuase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vesting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TokenPerBlockMaxCapUpdate(uint256)": EventFragment;
    "TokenPerBlockUpdate(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPerBlockMaxCapUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPerBlockUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    stakeIndex: BigNumber;
    amount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type TokenPerBlockMaxCapUpdateEvent = TypedEvent<
  [BigNumber] & { tokenPerBlockMaxCap: BigNumber }
>;

export type TokenPerBlockUpdateEvent = TypedEvent<
  [BigNumber] & { tokenPerBlock: BigNumber }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    stakeIndex: BigNumber;
    amount: BigNumber;
  }
>;

export class MasterChef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MasterChefInterface;

  functions: {
    approveForVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      _stakeFor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentClaimed(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentStaked(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentUnstaked(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakes(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          amount: BigNumber;
          weight: BigNumber;
          timestamp: BigNumber;
          stakeUntill: BigNumber;
          stakeFor: number;
        })[]
      ] & {
        stakes: ([BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          amount: BigNumber;
          weight: BigNumber;
          timestamp: BigNumber;
          stakeUntill: BigNumber;
          stakeFor: number;
        })[];
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        stakeToken: string;
        balance: BigNumber;
        lastRewardBlock: BigNumber;
        totalWeight: BigNumber;
      }
    >;

    puase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pull(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardingToken(overrides?: CallOverrides): Promise<[string]>;

    rewardsInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalClaimed: BigNumber;
        totalUnstaked: BigNumber;
        totalStaked: BigNumber;
        totalWeight: BigNumber;
        lastVest: BigNumber;
      }
    >;

    setTokenPerBlock(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenPerBlockMaxCap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenPerBlockMaxCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpuase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userStakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        amount: BigNumber;
        weight: BigNumber;
        timestamp: BigNumber;
        stakeUntill: BigNumber;
        stakeFor: number;
      }
    >;

    vesting(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      stakeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveForVesting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    _stakeFor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentClaimed(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentStaked(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentUnstaked(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakes(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      amount: BigNumber;
      weight: BigNumber;
      timestamp: BigNumber;
      stakeUntill: BigNumber;
      stakeFor: number;
    })[]
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      stakeToken: string;
      balance: BigNumber;
      lastRewardBlock: BigNumber;
      totalWeight: BigNumber;
    }
  >;

  puase(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pull(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardingToken(overrides?: CallOverrides): Promise<string>;

  rewardsInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalClaimed: BigNumber;
      totalUnstaked: BigNumber;
      totalStaked: BigNumber;
      totalWeight: BigNumber;
      lastVest: BigNumber;
    }
  >;

  setTokenPerBlock(
    _tokenPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenPerBlockMaxCap(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  tokenPerBlockMaxCap(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpuase(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userStakes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      amount: BigNumber;
      weight: BigNumber;
      timestamp: BigNumber;
      stakeUntill: BigNumber;
      stakeFor: number;
    }
  >;

  vesting(overrides?: CallOverrides): Promise<string>;

  withdraw(
    stakeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveForVesting(overrides?: CallOverrides): Promise<void>;

    claim(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    deposit(
      _amount: BigNumberish,
      _stakeFor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentClaimed(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentStaked(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentUnstaked(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakes(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        amount: BigNumber;
        weight: BigNumber;
        timestamp: BigNumber;
        stakeUntill: BigNumber;
        stakeFor: number;
      })[]
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        stakeToken: string;
        balance: BigNumber;
        lastRewardBlock: BigNumber;
        totalWeight: BigNumber;
      }
    >;

    puase(overrides?: CallOverrides): Promise<void>;

    pull(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardingToken(overrides?: CallOverrides): Promise<string>;

    rewardsInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalClaimed: BigNumber;
        totalUnstaked: BigNumber;
        totalStaked: BigNumber;
        totalWeight: BigNumber;
        lastVest: BigNumber;
      }
    >;

    setTokenPerBlock(
      _tokenPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPerBlockMaxCap(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPerBlockMaxCap(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpuase(overrides?: CallOverrides): Promise<void>;

    userStakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        amount: BigNumber;
        weight: BigNumber;
        timestamp: BigNumber;
        stakeUntill: BigNumber;
        stakeFor: number;
      }
    >;

    vesting(overrides?: CallOverrides): Promise<string>;

    withdraw(
      stakeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      user?: string | null,
      stakeIndex?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; stakeIndex: BigNumber; amount: BigNumber }
    >;

    Deposit(
      user?: string | null,
      stakeIndex?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; stakeIndex: BigNumber; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "TokenPerBlockMaxCapUpdate(uint256)"(
      tokenPerBlockMaxCap?: null
    ): TypedEventFilter<[BigNumber], { tokenPerBlockMaxCap: BigNumber }>;

    TokenPerBlockMaxCapUpdate(
      tokenPerBlockMaxCap?: null
    ): TypedEventFilter<[BigNumber], { tokenPerBlockMaxCap: BigNumber }>;

    "TokenPerBlockUpdate(uint256)"(
      tokenPerBlock?: null
    ): TypedEventFilter<[BigNumber], { tokenPerBlock: BigNumber }>;

    TokenPerBlockUpdate(
      tokenPerBlock?: null
    ): TypedEventFilter<[BigNumber], { tokenPerBlock: BigNumber }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Withdraw(address,uint256,uint256)"(
      user?: string | null,
      stakeIndex?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; stakeIndex: BigNumber; amount: BigNumber }
    >;

    Withdraw(
      user?: string | null,
      stakeIndex?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; stakeIndex: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    approveForVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _stakeFor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentClaimed(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentStaked(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentUnstaked(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakes(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    puase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pull(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardingToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setTokenPerBlock(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenPerBlockMaxCap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPerBlockMaxCap(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpuase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userStakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vesting(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      stakeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveForVesting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _stakeFor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentClaimed(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentStaked(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentUnstaked(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakes(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    puase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pull(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenPerBlock(
      _tokenPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPerBlockMaxCap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPerBlockMaxCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpuase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userStakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vesting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      stakeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
